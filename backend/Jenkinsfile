pipeline {
    agent any
    tools{
        gradle '7.1.1'
    }    // 내가 쓸 build gradle. '' 안에 들어갈 것은 gradle 이름이다.
    stages{
        stage('Ready'){
            steps{
                sh "echo 'Ready'"
            }
        }

        stage('Spring Boot Clean & Build'){
            steps{
                sh "chmod +x ./backend/gradlew;"
                sh "./backend/gradlew clean;"  
                sh "./backend/gradlew build -x test;"  
            }
        }   // build 시 test 없이 진행하고, test는 추후에 거르기 위해 이렇게 이용함.
        
        stage('Gradle Junit Test') {
            steps {
                    sh "chmod +x ./backend/gradlew; ./backend/gradlew test"
            }
        }   // test를 이용해서 확인함.
        stage('JUnit Test Publish') {
            steps {
                junit './backend/**/build/test-results/test/*.xml'
            }
        }   // Junit 테스트 결과를 젠킨스 프로젝트 첫 화면에서 볼 수 있게 결과물을 출력한다. 이렇게 해주면 알아서 결과물을 보여준다.

        stage('SonarQube Analysis'){
            steps{
                withSonarQubeEnv('sonar-server'){
                    sh './backend/gradlew sonarqube -Dsonar.projectKey=backend-spring -Dsonar.host.url=http://35.226.109.109:9000 -Dsonar.login=91854ccb098c5b0bba19d30c6636be69b8be2268'
                    
                }
            }
        }

        stage('SonarQube Quality Gate'){
            steps{
                timeout(time: 1, unit: 'MINUTES') {
                    script{
                        echo "Start~~~~"
                        def qg = waitForQualityGate()
                        echo "Status: ${qg.status}"
                        if(qg.status != 'OK') {
                            echo "NOT OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "failed")
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else{
                            echo "OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "success")
                        }
                        echo "End~~~~"
                    }
                }
            }
        }
        stage('docker build'){
            steps{
                sh 'docker build -t gcr.io/temporal-fx-321902/bizkicks-backend .'
            }
        }
        stage('Docker push image'){
            steps{
                script{
                     docker.withRegistry('https://gcr.io', 'gcr:gcr-ci-project'){
                     sh 'docker push gcr.io/temporal-fx-321902/bizkicks-backend' 
                     }
                }
            }
        }     // gcr push
        stage('Clean'){
            steps{
                sh "chmod +x gradlew;"
                sh "./backend/gradlew clean;"  
            }
        }
    }
}
pipeline {
    agent any
    tools{
        gradle '6.9'
    }    // 내가 쓸 build gradle. '' 안에 들어갈 것은 gradle 이름이다.
    stages{
        stage('Ready'){
            steps{
                sh "echo 'Ready'"
            }
        }

        stage('Spring Boot Clean & Build'){
            steps{
                dir('backend'){
                    sh "chmod +x gradlew;"
                    sh "./gradlew clean;"  
                    sh "./gradlew build -x test;"  
                }
            }
        }   // build 시 test 없이 진행하고, test는 추후에 거르기 위해 이렇게 이용함.
        
        stage('Gradle Junit Test') {
            steps {
                dir('backend'){
                    sh "chmod +x gradlew; ./gradlew check"
                }
            }
        }   // test를 이용해서 확인함.
        stage('JUnit Test Publish') {
            steps {
                dir('backend'){
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }   // Junit 테스트 결과를 젠킨스 프로젝트 첫 화면에서 볼 수 있게 결과물을 출력한다. 이렇게 해주면 알아서 결과물을 보여준다.

        stage('SonarQube Analysis'){
            steps{
                withSonarQubeEnv('sonar-server'){
                    dir('backend'){
                        sh './gradlew sonarqube -Dsonar.projectKey=backend-spring -Dsonar.host.url=http://35.226.109.109:9000 -Dsonar.login=31b7958293d82d75c60a01b0b2fffa873818ff3e'
                    }
                }
            }
        }
        

        // stage('SonarQube Quality Gate'){
        //     steps{
        //         timeout(time: 1, unit: 'MINUTES') {
        //             script{
        //                 echo "Start~~~~"
        //                 def qg = waitForQualityGate()
        //                 echo "Status: ${qg.status}"
        //                 if(qg.status != 'OK') {
        //                     echo "NOT OK Status: ${qg.status}"
        //                     updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "failed")
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 } else{
        //                     echo "OK Status: ${qg.status}"
        //                     updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "success")
        //                 }
        //                 echo "End~~~~"
        //             }
        //         }
        //     }
        // }
        stage('docker build'){
            steps{
                dir('backend'){
                    sh 'docker build -t gcr.io/temporal-fx-321902/bizkicks-backend:0.0.14.1 .'
                }
            }
        }
        stage('Docker push image'){
            steps{
                script{
                     docker.withRegistry('https://gcr.io', 'gcr:gcr-ci-project'){
                        sh 'docker push gcr.io/temporal-fx-321902/bizkicks-backend:0.0.14.1'
                     }
                }
            }
        }     // gcr push
        stage('Docker unused image remove'){
            steps{
                script{
                    sh 'docker image prune -f'
                }
            }
        }
        stage('Clean'){
            steps{
                dir('backend'){
                    sh "chmod +x gradlew;"
                    sh "./gradlew clean;"  
                }
            }
        }
    }
}